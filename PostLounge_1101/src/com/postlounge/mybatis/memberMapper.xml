<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="member">
	
	<!-- 
		<insert | delete | update | select 속성="값" 속성="값 ~~>
			- id 속성 : DAO에서 설정한 값 ▶ session.insert("memberInsert", dto);
			- parameterType 속성 : 매개 변수 타입(클래스타입, 기본데이터타입) : 생략 가능
			- 입력 값 표기 : dto.getIrum() → #{dto 內 속성명} ▶ #{irum}
			- SQL 문장의 마지막에 세미콜론(;)은 입력하지 않는다. 
			- resultType 속성 : select 쿼리를 수행했을 때 결과 타입
		</insert | delete | update | select>
	 -->
	
	<!-- 회원가입 -->
	<insert id="insertMember" parameterType="memberVO">
		INSERT INTO MEMBERS (MEMBER_IDX, NAME, ID, PWD, NICKNAME)
		VALUES (MEMBER_SEQ.NEXTVAL, #{name}, #{id}, #{pwd}, #{nickname})	
	</insert>
	
	<!-- 로그인 -->
	<select id="login" parameterType="memberVO" resultType="memberVO">
		SELECT  MEMBER_IDX, NAME, ID, PWD, NICKNAME
		FROM MEMBERS
		WHERE ID = #{id}
	</select>
	
	<!-- 가입 중복 체크 : 회원정보 모두 가져오기 (IS_ADMIN 제외) -->
	<select id="infos" resultType="memberVO">
		SELECT MEMBER_IDX, NAME, ID, PWD, NICKNAME, MEMBER_FILENAME, MEMBER_ORINAME, IS_DEL
		FROM MEMBERS
	</select>
	
	<!-- 회원탈퇴 : isDel값 1로 변경 -->
	<update id="memberDelete" parameterType="memberVO">
		UPDATE MEMBERS
		SET IS_DEL = 1
		WHERE ID = #{id}
	</update>
	
	<!--  회원 강제 탈퇴 : isDel값 2로 변경 -->
	<update id="memberDelete2" parameterType="memberVO">
		UPDATE MEMBERS
		SET IS_DEL = 2
		WHERE ID = #{id}
	</update>
	
	<!-- 회원정보 수정 -->
	<update id="update" parameterType="memberVO">
	     UPDATE MEMBER
	     SET NAME = #{name},
	     	 PASSWORD = #{password},
	     	 PHONE = #{phone},	
	         EMAIL = #{email}
	     WHERE ID = #{id}
	</update>
	
	<!-- [이하영] =================================== -->
	<!-- D.관리자 콘솔에서 모아보기를 위한 쿼리문 -->
	<!--  회원 가입일자 최신순으로 모아보기 -->
 	<select id="memBox" resultType="memberVO">
        SELECT *
		FROM (SELECT ROWNUM RNUM, m.*
      		  FROM (SELECT m.*
             		FROM MEMBERS m
					ORDER BY JOIN_DATE DESC) m)
		WHERE RNUM BETWEEN #{begin} AND #{end}
	</select>

	<update id="manageMem" parameterType="int">
		UPDATE MEMBERS
		SET IS_DEL = 2
		WHERE MEMBER_IDX = #{memberIdx}
	</update>
	
	<!-- 멤버 다중 선택 논리 삭제! -->
	<update id="delMemIdxList" parameterType="list"> 
	    <!-- 여러 회원을 업데이트하기 위한 UPDATE 문 -->
	    UPDATE MEMBERS
	    SET IS_DEL = 2
	    WHERE MEMBER_IDX IN
	    <foreach collection="list" item="memIdx" separator="," open="(" close=")">
	        #{memIdx}
	    </foreach>
	</update>
	
	
	<!-- 멤버 다중 선택 논리 삭제! -->
	<update id="upMemIdxList" parameterType="list"> 
	    <!-- 여러 회원을 관리자로 지정하기 위한 UPDATE 문 -->
	    UPDATE MEMBERS
	    SET IS_ADMIN = 1
	    WHERE MEMBER_IDX IN
	    <foreach collection="list" item="memIdx" separator="," open="(" close=")">
	        #{memIdx}
	    </foreach>
	</update>

	
	<select id="totalCnt" resultType="int">
		SELECT COUNT(*) FROM MEMBERS
	</select>
	
<!-- @@@ D.끝@@@ -->
	
	
	<!-- [유재현] ===================================-->
	<!-- 프로필업데이트 -->
	<update id="updateProfile" parameterType="MemberVO">
        UPDATE MEMBERS
        SET MEMBER_ORINAME = #{member_Oriname},
        	MEMBER_FILENAME = #{member_Filename}
        WHERE ID = #{id}
    </update>
    
    <!-- 아이디찾기 -->
     <select id="findMyId" parameterType="map" resultType="memberVO">
        SELECT * FROM MEMBERS
        WHERE NAME = #{name}
        AND NICKNAME = #{nickname}
    </select>
    
    <!-- 비밀번호 찾기 -->
    <select id="findMyPwd" parameterType="map" resultType="memberVO">
        SELECT * FROM MEMBERS
        WHERE NAME = #{name}
        AND ID = #{id}
        AND NICKNAME = #{nickname}
    </select>

	<!-- ===================================-->

</mapper>
	
